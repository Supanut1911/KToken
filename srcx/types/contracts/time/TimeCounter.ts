/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface TimeCounterInterface extends utils.Interface {
  functions: {
    "_grantPermission(address)": FunctionFragment;
    "_revokePermission(address)": FunctionFragment;
    "counterRights(address)": FunctionFragment;
    "getElapsedTimeOf(address)": FunctionFragment;
    "lastActions(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "stampLastAction(address)": FunctionFragment;
    "startTime()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_grantPermission"
      | "_revokePermission"
      | "counterRights"
      | "getElapsedTimeOf"
      | "lastActions"
      | "owner"
      | "renounceOwnership"
      | "stampLastAction"
      | "startTime"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_grantPermission",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_revokePermission",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "counterRights",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getElapsedTimeOf",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "lastActions", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stampLastAction",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "_grantPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_revokePermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "counterRights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getElapsedTimeOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stampLastAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "CounterRightChanged(address,uint256)": EventFragment;
    "LastActionStamped(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CounterRightChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LastActionStamped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface CounterRightChangedEventObject {
  counter: string;
  right: BigNumber;
}
export type CounterRightChangedEvent = TypedEvent<
  [string, BigNumber],
  CounterRightChangedEventObject
>;

export type CounterRightChangedEventFilter =
  TypedEventFilter<CounterRightChangedEvent>;

export interface LastActionStampedEventObject {
  actor: string;
  timestamp: BigNumber;
}
export type LastActionStampedEvent = TypedEvent<
  [string, BigNumber],
  LastActionStampedEventObject
>;

export type LastActionStampedEventFilter =
  TypedEventFilter<LastActionStampedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TimeCounter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TimeCounterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _grantPermission(
      counter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _revokePermission(
      counter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    counterRights(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getElapsedTimeOf(
      actor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lastActions(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stampLastAction(
      actor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _grantPermission(
    counter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _revokePermission(
    counter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  counterRights(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  getElapsedTimeOf(
    actor: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lastActions(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stampLastAction(
    actor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startTime(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _grantPermission(counter: string, overrides?: CallOverrides): Promise<void>;

    _revokePermission(
      counter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    counterRights(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getElapsedTimeOf(
      actor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastActions(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    stampLastAction(actor: string, overrides?: CallOverrides): Promise<void>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CounterRightChanged(address,uint256)"(
      counter?: null,
      right?: null
    ): CounterRightChangedEventFilter;
    CounterRightChanged(
      counter?: null,
      right?: null
    ): CounterRightChangedEventFilter;

    "LastActionStamped(address,uint256)"(
      actor?: null,
      timestamp?: null
    ): LastActionStampedEventFilter;
    LastActionStamped(
      actor?: null,
      timestamp?: null
    ): LastActionStampedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    _grantPermission(
      counter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _revokePermission(
      counter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    counterRights(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getElapsedTimeOf(
      actor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastActions(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stampLastAction(
      actor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _grantPermission(
      counter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _revokePermission(
      counter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    counterRights(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getElapsedTimeOf(
      actor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastActions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stampLastAction(
      actor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
