/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface KAP20CommitteeInterface extends utils.Interface {
  functions: {
    "committee()": FunctionFragment;
    "setCommittee(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "committee" | "setCommittee"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "committee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setCommittee",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "committee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCommittee",
    data: BytesLike
  ): Result;

  events: {
    "SetCommittee(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetCommittee"): EventFragment;
}

export interface SetCommitteeEventObject {
  oldCommittee: string;
  newComittee: string;
}
export type SetCommitteeEvent = TypedEvent<
  [string, string],
  SetCommitteeEventObject
>;

export type SetCommitteeEventFilter = TypedEventFilter<SetCommitteeEvent>;

export interface KAP20Committee extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: KAP20CommitteeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    committee(overrides?: CallOverrides): Promise<[string]>;

    setCommittee(
      _committee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  committee(overrides?: CallOverrides): Promise<string>;

  setCommittee(
    _committee: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    committee(overrides?: CallOverrides): Promise<string>;

    setCommittee(_committee: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "SetCommittee(address,address)"(
      oldCommittee?: null,
      newComittee?: null
    ): SetCommitteeEventFilter;
    SetCommittee(
      oldCommittee?: null,
      newComittee?: null
    ): SetCommitteeEventFilter;
  };

  estimateGas: {
    committee(overrides?: CallOverrides): Promise<BigNumber>;

    setCommittee(
      _committee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    committee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCommittee(
      _committee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
