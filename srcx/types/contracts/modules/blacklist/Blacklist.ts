/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface BlacklistInterface extends utils.Interface {
  functions: {
    "addBlacklist(address)": FunctionFragment;
    "blacklist(address)": FunctionFragment;
    "revokeBlacklist(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "addBlacklist" | "blacklist" | "revokeBlacklist"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addBlacklist",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "blacklist", values: [string]): string;
  encodeFunctionData(
    functionFragment: "revokeBlacklist",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "blacklist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeBlacklist",
    data: BytesLike
  ): Result;

  events: {
    "AddBlacklist(address,address)": EventFragment;
    "RevokeBlacklist(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddBlacklist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokeBlacklist"): EventFragment;
}

export interface AddBlacklistEventObject {
  account: string;
  caller: string;
}
export type AddBlacklistEvent = TypedEvent<
  [string, string],
  AddBlacklistEventObject
>;

export type AddBlacklistEventFilter = TypedEventFilter<AddBlacklistEvent>;

export interface RevokeBlacklistEventObject {
  account: string;
  caller: string;
}
export type RevokeBlacklistEvent = TypedEvent<
  [string, string],
  RevokeBlacklistEventObject
>;

export type RevokeBlacklistEventFilter = TypedEventFilter<RevokeBlacklistEvent>;

export interface Blacklist extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BlacklistInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addBlacklist(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    blacklist(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    revokeBlacklist(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addBlacklist(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  blacklist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  revokeBlacklist(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addBlacklist(account: string, overrides?: CallOverrides): Promise<void>;

    blacklist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    revokeBlacklist(account: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AddBlacklist(address,address)"(
      account?: string | null,
      caller?: string | null
    ): AddBlacklistEventFilter;
    AddBlacklist(
      account?: string | null,
      caller?: string | null
    ): AddBlacklistEventFilter;

    "RevokeBlacklist(address,address)"(
      account?: string | null,
      caller?: string | null
    ): RevokeBlacklistEventFilter;
    RevokeBlacklist(
      account?: string | null,
      caller?: string | null
    ): RevokeBlacklistEventFilter;
  };

  estimateGas: {
    addBlacklist(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    blacklist(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    revokeBlacklist(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addBlacklist(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    blacklist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeBlacklist(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
